openapi: "3.0.3"
info:
  title: "anzeigen_portal API"
  description: "anzeigen_portal API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8087"
paths:
  /categories/{id}:
    put:
      summary: "PUT categories/{id}"
      operationId: "updateAdCategory"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdCategory"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdCategory"
    delete:
      summary: "DELETE categories/{id}"
      operationId: "deleteAdCategory"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
    get:
      summary: "GET categories/{id}"
      operationId: "getAdCategory"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdCategory"
  /categories:
    post:
      summary: "POST categories"
      operationId: "createAdCategory"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdCategory"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdCategory"
    get:
      summary: "GET categories"
      operationId: "getAllAdCategories"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AdCategory"
  /ads/incrementView/{id}:
    put:
      summary: "PUT ads/incrementView/{id}"
      operationId: "incrementView"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
  /swbreads/incrementView/{id}:
    put:
      summary: "PUT swbreads/incrementView/{id}"
      operationId: "incrementAdView"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
  /ads/{id}:
    put:
      summary: "PUT ads/{id}"
      operationId: "updateAd"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdTO"
    delete:
      summary: "DELETE ads/{id}"
      operationId: "deleteAd"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
    get:
      summary: "GET ads/{id}"
      operationId: "getAd"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdTO"
  /swbreads/{id}:
    put:
      summary: "PUT swbreads/{id}"
      operationId: "updateSwbread"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdTO"
    delete:
      summary: "DELETE swbreads/{id}"
      operationId: "deleteSwbread"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
    get:
      summary: "GET swbreads/{id}"
      operationId: "getSwbread"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdTO"
  /ads/deactivate/{id}:
    put:
      summary: "PUT ads/deactivate/{id}"
      operationId: "deactivateAd"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
  /swbreads/deactivate/{id}:
    put:
      summary: "PUT swbreads/deactivate/{id}"
      operationId: "deactivateSwbread"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
  /ads:
    post:
      summary: "POST ads"
      operationId: "createAd"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdTO"
    get:
      summary: "GET ads"
      operationId: "getAds"
      parameters:
        - name: "isActive"
          in: "query"
          required: true
          schema:
            type: "boolean"
        - name: "userId"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "searchTerm"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "categoryId"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int64"
        - name: "type"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
        - name: "adId"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  content:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/AdTO"
                  totalElements:
                    type: "integer"
                    format: "int64"
                  totalPages:
                    type: "integer"
                    format: "int32"
                  size:
                    type: "integer"
                    format: "int32"
                  number:
                    type: "integer"
                    format: "int32"
                  numberOfElements:
                    type: "integer"
                    format: "int32"
                  sort:
                    type: "object"
                    description: "Sort information"
                    properties:
                      sorted:
                        type: "boolean"
                      unsorted:
                        type: "boolean"
                      empty:
                        type: "boolean"
                  first:
                    type: "boolean"
                  last:
                    type: "boolean"
  /swbreads:
    post:
      summary: "POST swbreads"
      operationId: "createSwbread"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdTO"
    get:
      summary: "GET swbreads"
      operationId: "getSwbreads"
      parameters:
        - name: "isActive"
          in: "query"
          required: true
          schema:
            type: "boolean"
        - name: "userId"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "searchTerm"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "categoryId"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int64"
        - name: "type"
          in: "query"
          required: false
          schema:
            type: "string"
            enum:
              - "SEEK"
              - "OFFER"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
        - name: "adId"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AdTO"
  /files/{id}:
    get:
      summary: "GET files/{id}"
      operationId: "getFile"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SwbFileTO"
  /images/sanitize:
    post:
      summary: "POST images/sanitize"
      operationId: "sanitizeImage"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SwbImageSanitize"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
  /images/{id}:
    get:
      summary: "GET images/{id}"
      operationId: "getImage"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SwbImageTO"
  /settings:
    put:
      summary: "PUT settings"
      operationId: "updateSettings"
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/SettingTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SettingTO"
    get:
      summary: "GET settings"
      operationId: "getSettings"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SettingTO"
  /settings/{settingName}:
    get:
      summary: "GET settings/{settingName}"
      operationId: "getSetting"
      parameters:
        - name: "settingName"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "MOTD"
              - "MAX_SWB_IMAGE_SIZE"
              - "MAX_SWB_FILE_SIZE"
              - "MAX_SWB_FILES_LENGTH"
              - "MAX_EXPIRY_DATE_RANGE"
              - "AGB_FILE"
              - "DATENSCHUTZHINWEISE_FILE"
              - "MAX_PAGE_SIZE"
              - "DEFAULT_SORTING"
              - "DEFAULT_ORDERING"
              - "MAX_ARCHIVE_DATE_RANGE"
              - "MAX_RENTAL_DATE_RANGE"
              - "DISALLOWED_EMAIL_DOMAINS"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SettingTO"
  /users/find:
    put:
      summary: "PUT users/find"
      operationId: "findUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SwbUserFind"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SwbUserTO"
  /users:
    post:
      summary: "POST users"
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SwbUserTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SwbUserTO"
  /users/admin/{userId}:
    get:
      summary: "GET users/admin/{userId}"
      operationId: "getUser"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SwbUserTO"
components:
  schemas:
    SwbImageSanitize:
      type: "object"
      properties:
        imageBase64:
          type: "string"
    SwbUserFind:
      type: "object"
      properties:
        lhmObjectID:
          type: "string"
    AdCategory:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        standard:
          type: "boolean"
    SwbUserTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        lhmObjectId:
          type: "string"
        displayName:
          type: "string"
    SwbImageTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        imageBase64:
          type: "string"
    SwbFileTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        size:
          type: "integer"
          format: "int32"
        fileBase64:
          type: "string"
    AdTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        swbUser:
          $ref: "#/components/schemas/SwbUserTO"
        adCategory:
          $ref: "#/components/schemas/AdCategory"
        adType:
          type: "string"
          enum:
            - "SEEK"
            - "OFFER"
            - "RENTAL"
        active:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
        price:
          type: "number"
          format: "double"
        phone:
          type: "string"
        email:
          type: "string"
        link:
          type: "string"
        creationDateTime:
          type: "string"
          format: "date-time"
        expiryDate:
          type: "string"
          format: "date"
        rentalDate:
          type: "string"
          format: "date"
        imagePreviewBase64:
          type: "string"
        adImg:
          $ref: "#/components/schemas/SwbImageTO"
        adFiles:
          type: "array"
          items:
            $ref: "#/components/schemas/SwbFileTO"
        views:
          type: "integer"
          format: "int32"
        condition:
          type: "string"
          enum:
            - "NEW"
            - "VERY_GOOD"
            - "GOOD"
            - "OKAY"
            - "DEFECTIVE"
    SettingTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        settingName:
          type: "string"
          enum:
            - "MOTD"
            - "MAX_SWB_IMAGE_SIZE"
            - "MAX_SWB_FILE_SIZE"
            - "MAX_SWB_FILES_LENGTH"
            - "MAX_EXPIRY_DATE_RANGE"
            - "AGB_FILE"
            - "DATENSCHUTZHINWEISE_FILE"
            - "MAX_PAGE_SIZE"
            - "DEFAULT_SORTING"
            - "DEFAULT_ORDERING"
            - "MAX_ARCHIVE_DATE_RANGE"
            - "MAX_RENTAL_DATE_RANGE"
            - "DISALLOWED_EMAIL_DOMAINS"
        numberValue:
          type: "integer"
          format: "int32"
        textValue:
          type: "string"
        flagValue:
          type: "boolean"
        fileValue:
          $ref: "#/components/schemas/SwbFileTO"
  securitySchemes:
    spring_oauth:
      type: oauth2
      description: Oauth2 flow
      flows:
        password:
          authorizationUrl: http://keycloak:8100/auth/realms/local_realm/protocol/openid-connect/auth
          tokenUrl: http://keycloak:8100/auth/realms/local_realm/protocol/openid-connect/token
          refreshUrl: http://keycloak:8100/auth/realms/local_realm/protocol/openid-connect/token
          scopes:
            lhm_extended: lhm_extended
