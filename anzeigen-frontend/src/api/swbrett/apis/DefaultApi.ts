/* tslint:disable */
/* eslint-disable */
/**
 * anzeigen_portal API
 * anzeigen_portal API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdCategory,
  AdTO,
  GetAds200Response,
  SettingTO,
  SwbFileTO,
  SwbImageSanitize,
  SwbImageTO,
  SwbUserFind,
  SwbUserTO,
} from '../models/index';
import {
    AdCategoryFromJSON,
    AdCategoryToJSON,
    AdTOFromJSON,
    AdTOToJSON,
    GetAds200ResponseFromJSON,
    GetAds200ResponseToJSON,
    SettingTOFromJSON,
    SettingTOToJSON,
    SwbFileTOFromJSON,
    SwbFileTOToJSON,
    SwbImageSanitizeFromJSON,
    SwbImageSanitizeToJSON,
    SwbImageTOFromJSON,
    SwbImageTOToJSON,
    SwbUserFindFromJSON,
    SwbUserFindToJSON,
    SwbUserTOFromJSON,
    SwbUserTOToJSON,
} from '../models/index';

export interface CreateAdRequest {
    adTO: AdTO;
}

export interface CreateAdCategoryRequest {
    adCategory: AdCategory;
}

export interface CreateSwbreadRequest {
    adTO: AdTO;
}

export interface CreateUserRequest {
    swbUserTO: SwbUserTO;
}

export interface DeactivateAdRequest {
    id: number;
}

export interface DeactivateSwbreadRequest {
    id: number;
}

export interface DeleteAdRequest {
    id: number;
}

export interface DeleteAdCategoryRequest {
    id: number;
}

export interface DeleteSwbreadRequest {
    id: number;
}

export interface FindUserRequest {
    swbUserFind: SwbUserFind;
}

export interface GetAdRequest {
    id: number;
}

export interface GetAdCategoryRequest {
    id: number;
}

export interface GetAdsRequest {
    isActive: boolean;
    userId?: string;
    searchTerm?: string;
    categoryId?: number;
    type?: GetAdsTypeEnum;
    sortBy?: string;
    order?: string;
    page?: number;
    adId?: number;
}

export interface GetFileRequest {
    id: number;
}

export interface GetImageRequest {
    id: number;
}

export interface GetSettingRequest {
    settingName: GetSettingSettingNameEnum;
}

export interface GetSwbreadRequest {
    id: number;
}

export interface GetSwbreadsRequest {
    isActive: boolean;
    userId?: string;
    searchTerm?: string;
    categoryId?: number;
    type?: GetSwbreadsTypeEnum;
    sortBy?: string;
    order?: string;
    page?: number;
    adId?: number;
}

export interface GetUserRequest {
    userId: number;
}

export interface IncrementAdViewRequest {
    id: number;
}

export interface IncrementViewRequest {
    id: number;
}

export interface SanitizeImageRequest {
    swbImageSanitize: SwbImageSanitize;
}

export interface UpdateAdRequest {
    id: number;
    adTO: AdTO;
}

export interface UpdateAdCategoryRequest {
    id: number;
    adCategory: AdCategory;
}

export interface UpdateSettingsRequest {
    settingTO: Array<SettingTO>;
}

export interface UpdateSwbreadRequest {
    id: number;
    adTO: AdTO;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * POST ads
     */
    async createAdRaw(requestParameters: CreateAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdTO>> {
        if (requestParameters['adTO'] == null) {
            throw new runtime.RequiredError(
                'adTO',
                'Required parameter "adTO" was null or undefined when calling createAd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdTOToJSON(requestParameters['adTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdTOFromJSON(jsonValue));
    }

    /**
     * POST ads
     */
    async createAd(requestParameters: CreateAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdTO> {
        const response = await this.createAdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST categories
     */
    async createAdCategoryRaw(requestParameters: CreateAdCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdCategory>> {
        if (requestParameters['adCategory'] == null) {
            throw new runtime.RequiredError(
                'adCategory',
                'Required parameter "adCategory" was null or undefined when calling createAdCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdCategoryToJSON(requestParameters['adCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdCategoryFromJSON(jsonValue));
    }

    /**
     * POST categories
     */
    async createAdCategory(requestParameters: CreateAdCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdCategory> {
        const response = await this.createAdCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST swbreads
     */
    async createSwbreadRaw(requestParameters: CreateSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdTO>> {
        if (requestParameters['adTO'] == null) {
            throw new runtime.RequiredError(
                'adTO',
                'Required parameter "adTO" was null or undefined when calling createSwbread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/swbreads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdTOToJSON(requestParameters['adTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdTOFromJSON(jsonValue));
    }

    /**
     * POST swbreads
     */
    async createSwbread(requestParameters: CreateSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdTO> {
        const response = await this.createSwbreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST users
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SwbUserTO>> {
        if (requestParameters['swbUserTO'] == null) {
            throw new runtime.RequiredError(
                'swbUserTO',
                'Required parameter "swbUserTO" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SwbUserTOToJSON(requestParameters['swbUserTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SwbUserTOFromJSON(jsonValue));
    }

    /**
     * POST users
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SwbUserTO> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT ads/deactivate/{id}
     */
    async deactivateAdRaw(requestParameters: DeactivateAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deactivateAd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ads/deactivate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PUT ads/deactivate/{id}
     */
    async deactivateAd(requestParameters: DeactivateAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deactivateAdRaw(requestParameters, initOverrides);
    }

    /**
     * PUT swbreads/deactivate/{id}
     */
    async deactivateSwbreadRaw(requestParameters: DeactivateSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deactivateSwbread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swbreads/deactivate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PUT swbreads/deactivate/{id}
     */
    async deactivateSwbread(requestParameters: DeactivateSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deactivateSwbreadRaw(requestParameters, initOverrides);
    }

    /**
     * DELETE ads/{id}
     */
    async deleteAdRaw(requestParameters: DeleteAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * DELETE ads/{id}
     */
    async deleteAd(requestParameters: DeleteAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdRaw(requestParameters, initOverrides);
    }

    /**
     * DELETE categories/{id}
     */
    async deleteAdCategoryRaw(requestParameters: DeleteAdCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAdCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * DELETE categories/{id}
     */
    async deleteAdCategory(requestParameters: DeleteAdCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * DELETE swbreads/{id}
     */
    async deleteSwbreadRaw(requestParameters: DeleteSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSwbread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swbreads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * DELETE swbreads/{id}
     */
    async deleteSwbread(requestParameters: DeleteSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwbreadRaw(requestParameters, initOverrides);
    }

    /**
     * PUT users/find
     */
    async findUserRaw(requestParameters: FindUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SwbUserTO>> {
        if (requestParameters['swbUserFind'] == null) {
            throw new runtime.RequiredError(
                'swbUserFind',
                'Required parameter "swbUserFind" was null or undefined when calling findUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/find`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SwbUserFindToJSON(requestParameters['swbUserFind']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SwbUserTOFromJSON(jsonValue));
    }

    /**
     * PUT users/find
     */
    async findUser(requestParameters: FindUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SwbUserTO> {
        const response = await this.findUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET ads/{id}
     */
    async getAdRaw(requestParameters: GetAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdTOFromJSON(jsonValue));
    }

    /**
     * GET ads/{id}
     */
    async getAd(requestParameters: GetAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdTO> {
        const response = await this.getAdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET categories/{id}
     */
    async getAdCategoryRaw(requestParameters: GetAdCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAdCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdCategoryFromJSON(jsonValue));
    }

    /**
     * GET categories/{id}
     */
    async getAdCategory(requestParameters: GetAdCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdCategory> {
        const response = await this.getAdCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET ads
     */
    async getAdsRaw(requestParameters: GetAdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAds200Response>> {
        if (requestParameters['isActive'] == null) {
            throw new runtime.RequiredError(
                'isActive',
                'Required parameter "isActive" was null or undefined when calling getAds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['adId'] != null) {
            queryParameters['adId'] = requestParameters['adId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAds200ResponseFromJSON(jsonValue));
    }

    /**
     * GET ads
     */
    async getAds(requestParameters: GetAdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAds200Response> {
        const response = await this.getAdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET categories
     */
    async getAllAdCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdCategoryFromJSON));
    }

    /**
     * GET categories
     */
    async getAllAdCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdCategory>> {
        const response = await this.getAllAdCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * GET files/{id}
     */
    async getFileRaw(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SwbFileTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SwbFileTOFromJSON(jsonValue));
    }

    /**
     * GET files/{id}
     */
    async getFile(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SwbFileTO> {
        const response = await this.getFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET images/{id}
     */
    async getImageRaw(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SwbImageTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/images/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SwbImageTOFromJSON(jsonValue));
    }

    /**
     * GET images/{id}
     */
    async getImage(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SwbImageTO> {
        const response = await this.getImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET settings/{settingName}
     */
    async getSettingRaw(requestParameters: GetSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingTO>> {
        if (requestParameters['settingName'] == null) {
            throw new runtime.RequiredError(
                'settingName',
                'Required parameter "settingName" was null or undefined when calling getSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings/{settingName}`.replace(`{${"settingName"}}`, encodeURIComponent(String(requestParameters['settingName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingTOFromJSON(jsonValue));
    }

    /**
     * GET settings/{settingName}
     */
    async getSetting(requestParameters: GetSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingTO> {
        const response = await this.getSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET settings
     */
    async getSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SettingTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SettingTOFromJSON));
    }

    /**
     * GET settings
     */
    async getSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SettingTO>> {
        const response = await this.getSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * GET swbreads/{id}
     */
    async getSwbreadRaw(requestParameters: GetSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSwbread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swbreads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdTOFromJSON(jsonValue));
    }

    /**
     * GET swbreads/{id}
     */
    async getSwbread(requestParameters: GetSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdTO> {
        const response = await this.getSwbreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET swbreads
     */
    async getSwbreadsRaw(requestParameters: GetSwbreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdTO>> {
        if (requestParameters['isActive'] == null) {
            throw new runtime.RequiredError(
                'isActive',
                'Required parameter "isActive" was null or undefined when calling getSwbreads().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['adId'] != null) {
            queryParameters['adId'] = requestParameters['adId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swbreads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdTOFromJSON(jsonValue));
    }

    /**
     * GET swbreads
     */
    async getSwbreads(requestParameters: GetSwbreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdTO> {
        const response = await this.getSwbreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET users/admin/{userId}
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SwbUserTO>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/admin/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SwbUserTOFromJSON(jsonValue));
    }

    /**
     * GET users/admin/{userId}
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SwbUserTO> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT swbreads/incrementView/{id}
     */
    async incrementAdViewRaw(requestParameters: IncrementAdViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling incrementAdView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swbreads/incrementView/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PUT swbreads/incrementView/{id}
     */
    async incrementAdView(requestParameters: IncrementAdViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.incrementAdViewRaw(requestParameters, initOverrides);
    }

    /**
     * PUT ads/incrementView/{id}
     */
    async incrementViewRaw(requestParameters: IncrementViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling incrementView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ads/incrementView/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PUT ads/incrementView/{id}
     */
    async incrementView(requestParameters: IncrementViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.incrementViewRaw(requestParameters, initOverrides);
    }

    /**
     * POST images/sanitize
     */
    async sanitizeImageRaw(requestParameters: SanitizeImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['swbImageSanitize'] == null) {
            throw new runtime.RequiredError(
                'swbImageSanitize',
                'Required parameter "swbImageSanitize" was null or undefined when calling sanitizeImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/images/sanitize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SwbImageSanitizeToJSON(requestParameters['swbImageSanitize']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST images/sanitize
     */
    async sanitizeImage(requestParameters: SanitizeImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.sanitizeImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT ads/{id}
     */
    async updateAdRaw(requestParameters: UpdateAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAd().'
            );
        }

        if (requestParameters['adTO'] == null) {
            throw new runtime.RequiredError(
                'adTO',
                'Required parameter "adTO" was null or undefined when calling updateAd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdTOToJSON(requestParameters['adTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdTOFromJSON(jsonValue));
    }

    /**
     * PUT ads/{id}
     */
    async updateAd(requestParameters: UpdateAdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdTO> {
        const response = await this.updateAdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT categories/{id}
     */
    async updateAdCategoryRaw(requestParameters: UpdateAdCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAdCategory().'
            );
        }

        if (requestParameters['adCategory'] == null) {
            throw new runtime.RequiredError(
                'adCategory',
                'Required parameter "adCategory" was null or undefined when calling updateAdCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdCategoryToJSON(requestParameters['adCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdCategoryFromJSON(jsonValue));
    }

    /**
     * PUT categories/{id}
     */
    async updateAdCategory(requestParameters: UpdateAdCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdCategory> {
        const response = await this.updateAdCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT settings
     */
    async updateSettingsRaw(requestParameters: UpdateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SettingTO>>> {
        if (requestParameters['settingTO'] == null) {
            throw new runtime.RequiredError(
                'settingTO',
                'Required parameter "settingTO" was null or undefined when calling updateSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/settings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['settingTO']!.map(SettingTOToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SettingTOFromJSON));
    }

    /**
     * PUT settings
     */
    async updateSettings(requestParameters: UpdateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SettingTO>> {
        const response = await this.updateSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT swbreads/{id}
     */
    async updateSwbreadRaw(requestParameters: UpdateSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSwbread().'
            );
        }

        if (requestParameters['adTO'] == null) {
            throw new runtime.RequiredError(
                'adTO',
                'Required parameter "adTO" was null or undefined when calling updateSwbread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/swbreads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdTOToJSON(requestParameters['adTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdTOFromJSON(jsonValue));
    }

    /**
     * PUT swbreads/{id}
     */
    async updateSwbread(requestParameters: UpdateSwbreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdTO> {
        const response = await this.updateSwbreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAdsTypeEnum = {
    SEEK: 'SEEK',
    OFFER: 'OFFER'
} as const;
export type GetAdsTypeEnum = typeof GetAdsTypeEnum[keyof typeof GetAdsTypeEnum];
/**
 * @export
 */
export const GetSettingSettingNameEnum = {
    MOTD: 'MOTD',
    MAX_SWB_IMAGE_SIZE: 'MAX_SWB_IMAGE_SIZE',
    MAX_SWB_FILE_SIZE: 'MAX_SWB_FILE_SIZE',
    MAX_SWB_FILES_LENGTH: 'MAX_SWB_FILES_LENGTH',
    MAX_EXPIRY_DATE_RANGE: 'MAX_EXPIRY_DATE_RANGE',
    AGB_FILE: 'AGB_FILE',
    DATENSCHUTZHINWEISE_FILE: 'DATENSCHUTZHINWEISE_FILE',
    MAX_PAGE_SIZE: 'MAX_PAGE_SIZE',
    DEFAULT_SORTING: 'DEFAULT_SORTING',
    DEFAULT_ORDERING: 'DEFAULT_ORDERING',
    MAX_ARCHIVE_DATE_RANGE: 'MAX_ARCHIVE_DATE_RANGE'
} as const;
export type GetSettingSettingNameEnum = typeof GetSettingSettingNameEnum[keyof typeof GetSettingSettingNameEnum];
/**
 * @export
 */
export const GetSwbreadsTypeEnum = {
    SEEK: 'SEEK',
    OFFER: 'OFFER'
} as const;
export type GetSwbreadsTypeEnum = typeof GetSwbreadsTypeEnum[keyof typeof GetSwbreadsTypeEnum];
